### VARIOUS MYSQL OPTIMIZATION BY WEBSTACK.UP
## for a 32GB RAM server with nginx+mysql
## PLEASE NOTE: the file in /etc/mysql/ is an HARD LINK to WEBSTACKUP. DO NOT EDIT DIRECTLY. Overwrite in a custom file instead.

[mysqld]

## Disable MySQLx
# itâ€™s a way to name the crossover between relational and document models 
# https://www.percona.com/blog/2019/01/07/understanding-mysql-x-all-flavors/
mysqlx = off

## MySQL MUST listen only to localhost!
bind-address = 127.0.0.1
mysqlx-bind-address = 127.0.0.1


## MySQL legacy auth plugin
# The caching_sha2_password plugin will be supported in a future PHP release.
# http://php.net/manual/en/mysqli.requirements.php
default_authentication_plugin=mysql_native_password


## Disable MySQL name resolution
# https://bugs.mysql.com/bug.php?id=22118 Makes "127.0.0.1" unusable (use "localhost" instead). 
# Connections over SSH will fail
# skip_name_resolve


## Rise the max_connections limit
# https://serverfault.com/questions/92056/how-to-find-out-the-memory-cost-of-each-mysql-connection
#
# Example
# -------
# Total buffers: 168.0M global + 65.1M per thread (250 max threads)
# Maximum possible memory usage: 16.1G (51.38% of installed RAM)
# 
# Check: select @@GLOBAL.max_connections;
max_connections = 250


## The size in bytes of the buffer pool, the memory area where InnoDB caches table and index data. 
# https://dba.stackexchange.com/a/27341
# First run this query
# ---
# SELECT CEILING(Total_InnoDB_Bytes*1.6/POWER(1024,3)) RIBPS FROM
# (SELECT SUM(data_length+index_length) Total_InnoDB_Bytes
# FROM information_schema.tables WHERE engine='InnoDB') A;
# ---
# This will give you the RIBPS, Recommended InnoDB Buffer Pool Size, based on all InnoDB Data and Indexes, with an additional 60%.
innodb_buffer_pool_size = 4G


##
# the log file size should be set as big as possible, but not bigger than necessary.
# A bigger log file size is better for performance, but it has a drawback (a significant one) that you need to worry about: the recovery time after a crash
# https://www.percona.com/blog/2016/05/31/what-is-a-big-innodb_log_file_size/
innodb_log_file_size = 512M


##
# If innodb_buffer_pool_size is set to more than 1GB, innodb_buffer_pool_instances divides 
# the InnoDB buffer pool into a specific number of instances.
# Each instance manages its own data structures and takes an equal portion of the total buffer pool size, 
# so for example if innodb_buffer_pool_size is 4GB and innodb_buffer_pool_instances is set to 4, each 
# instance will be 1GB. Each instance should ideally be at least 1GB in size.
# https://mariadb.com/kb/en/innodb-buffer-pool
innodb_buffer_pool_instances = 4


##
# How MySQL Uses the Join Buffer Cache
# https://dev.mysql.com/doc/internals/en/join-buffer-size.html
join_buffer_size = 512kb


## 
# https://dev.mysql.com/doc/refman/8.0/en/stored-programs-logging.html
# Check: SELECT @@GLOBAL.log_bin_trust_function_creators
log_bin_trust_function_creators = 1


##
# The largest possible packet that can be transmitted to or from a MySQL server
# It is safe to increase the value of this variable because the extra memory is allocated only when needed
# https://dev.mysql.com/doc/refman/8.0/en/packet-too-large.html
max_allowed_packet = 1G


## The General Query Log
# https://dev.mysql.com/doc/refman/8.0/en/query-log.html
# This SLOWS DOWN MySQL! Enable for debugging only!
general_log = 0
general_log_file = /var/log/mysql/general.log
