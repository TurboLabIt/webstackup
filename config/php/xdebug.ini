;; XDEBUG BY WEBSTACK.UP
; This is ideal for local development. Don't use in production!
;
; Please note that there is no filter available (remote_connect_back), and anybody who can connect to the webserver will then be able to start a debugging session, even if their address does not match xdebug.remote_host.
;zend_extension=xdebug.so

; This switch controls whether Xdebug should try to contact a debug client which is listening on the host and port as set with the settings xdebug.remote_host and xdebug.remote_port. If a connection can not be established the script will just continue as if this setting was 0.
xdebug.remote_enable=1

; Controls which IDE Key Xdebug should pass on to the DBGp debugger handler. [...] If this setting is set, it always overrides the environment variables.
xdebug.idekey=xdebug

; Normally you need to use a specific HTTP GET/POST variable to start remote debugging (see Remote Debugging). When this setting is set to 1, Xdebug will always attempt to start a remote debugging session and try to connect to a client, even if the GET/POST/COOKIE variable was not present.
xdebug.remote_autostart=1

; If enabled, the xdebug.remote_host setting is ignored and Xdebug will try to connect to the client that made the HTTP request. It checks the $_SERVER['HTTP_X_FORWARDED_FOR'] and $_SERVER['REMOTE_ADDR'] variables to find out which IP address to use.
; This setting does not apply for debugging through the CLI, as the $SERVER header variables are not available there.
xdebug.remote_connect_back=1

; The port to which Xdebug tries to connect on the remote host. Port 9000 is the default for both the client and the bundled debugclient. As many clients use this port number, it is best to leave this setting unchanged.
xdebug.remote_port=9000

; If this setting is 1, Xdebug will color var_dumps and stack traces output when in CLI mode and when the output is a tty. On Windows, the ANSICON tool needs to be installed.
; If the setting is 2, then Xdebug will always color var_dumps and stack trace, no matter whether it's connected to a tty or whether ANSICON is installed. In this case, you might end up seeing escape codes.
xdebug.cli_color=1

; If this setting is set to 0, then Xdebug will not set-up internal structures to allow code coverage. This speeds up Xdebug quite a bit, but of course, Code Coverage Analysis won't work.
xdebug.coverage_enable=0

;Controls how many nested levels of array elements and object properties are when variables are displayed with either xdebug_var_dump(), xdebug.show_local_vars or through Function Traces.
xdebug.var_display_max_depth=9
